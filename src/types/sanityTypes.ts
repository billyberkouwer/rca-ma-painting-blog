/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type About = {
  _id: string;
  _type: "about";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  textContent?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  pageMeta?: {
    ogTitle?: string;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    ogType?: "website" | "article" | "blog" | "video" | "image";
    description?: string;
    keywords?: string;
    _type: "pageMeta";
  };
};

export type Posts = {
  _id: string;
  _type: "posts";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  textContent?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  imageArray?: ImageArray;
  createdAt?: string;
  pageMeta?: {
    ogTitle?: string;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    ogType?: "website" | "article" | "blog" | "video" | "image";
    description?: string;
    keywords?: string;
    _type: "pageMeta";
  };
};

export type PageMeta = {
  _id: string;
  _type: "pageMeta";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  ogTitle?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  ogType?: "website" | "article" | "blog" | "video" | "image";
  description?: string;
  keywords?: string;
};

export type ImageArray = {
  _type: "imageArray";
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  alt?: string;
  caption?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type ImageBlock = {
  _id: string;
  _type: "imageBlock";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  alt?: string;
  caption?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type TextBlock = {
  _id: string;
  _type: "textBlock";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  text?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type Index = {
  _id: string;
  _type: "index";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  elements?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "imageBlock";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "textBlock";
  }>;
  pageMeta?: {
    ogTitle?: string;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    ogType?: "website" | "article" | "blog" | "video" | "image";
    description?: string;
    keywords?: string;
    _type: "pageMeta";
  };
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = About | Posts | PageMeta | ImageArray | ImageBlock | TextBlock | Index | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: homepageQuery
// Query: *[_type == "index"][0] {    ...,    "elements": elements[] | order(@->._createdAt desc) {        _type,        _ref,        ...@-> {            _type,            ...select(                _type == "imageBlock" => {                    _createdAt,                    _updatedAt,                    "image": image.asset->{                        ...                    },                    alt,                    caption                },                _type == "textBlock" => {                    _createdAt,                    _updatedAt,                    title,                    text                }            )        }    }  }
export type HomepageQueryResult = {
  _id: string;
  _type: "index";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  elements: Array<{
    _type: "imageBlock";
    _ref: string;
    _createdAt: string;
    _updatedAt: string;
    image: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
    alt: string | null;
    caption: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
  } | {
    _type: "textBlock";
    _ref: string;
    _createdAt: string;
    _updatedAt: string;
    title: string | null;
    text: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
  }> | null;
  pageMeta?: {
    ogTitle?: string;
    image?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    ogType?: "article" | "blog" | "image" | "video" | "website";
    description?: string;
    keywords?: string;
    _type: "pageMeta";
  };
} | null;
// Variable: homepageMetaQuery
// Query: *[_type == "index"][0] {     "pageMeta": pageMeta{        keywords,        _updatedAt,        title,        description,        ogType,        ogTitle,        ogDescription,        "ogImage": image.asset->     }    }
export type HomepageMetaQueryResult = {
  pageMeta: {
    keywords: string | null;
    _updatedAt: null;
    title: null;
    description: string | null;
    ogType: "article" | "blog" | "image" | "video" | "website" | null;
    ogTitle: string | null;
    ogDescription: null;
    ogImage: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
  } | null;
} | null;
// Variable: postsQuery
// Query: *[_type == "posts"] | order(coalesce(createdAt, _createdAt) desc) {    _id,    _createdAt,    _updatedAt,    title,    textContent,    createdAt,    "imageArray": imageArray{        ...,        "images": images[]{            ...,            "asset": asset->        }    }}
export type PostsQueryResult = Array<{
  _id: string;
  _createdAt: string;
  _updatedAt: string;
  title: string | null;
  textContent: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  createdAt: string | null;
  imageArray: {
    _type: "imageArray";
    images: Array<{
      asset: {
        _id: string;
        _type: "sanity.imageAsset";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        originalFilename?: string;
        label?: string;
        title?: string;
        description?: string;
        altText?: string;
        sha1hash?: string;
        extension?: string;
        mimeType?: string;
        size?: number;
        assetId?: string;
        uploadId?: string;
        path?: string;
        url?: string;
        metadata?: SanityImageMetadata;
        source?: SanityAssetSourceData;
      } | null;
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
      _key: string;
    }> | null;
    alt?: string;
    caption?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
  } | null;
}>;
// Variable: postsPaginatedQuery
// Query: *[_type == "posts"] | order(coalesce(createdAt, _createdAt) desc) [$start...$end] {    _id,    _createdAt,    _updatedAt,    title,    textContent,    createdAt,    "imageArray": imageArray{        ...,        "images": images[]{            ...,            "asset": asset->        }    }}
export type PostsPaginatedQueryResult = Array<{
  _id: string;
  _createdAt: string;
  _updatedAt: string;
  title: string | null;
  textContent: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  createdAt: string | null;
  imageArray: {
    _type: "imageArray";
    images: Array<{
      asset: {
        _id: string;
        _type: "sanity.imageAsset";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        originalFilename?: string;
        label?: string;
        title?: string;
        description?: string;
        altText?: string;
        sha1hash?: string;
        extension?: string;
        mimeType?: string;
        size?: number;
        assetId?: string;
        uploadId?: string;
        path?: string;
        url?: string;
        metadata?: SanityImageMetadata;
        source?: SanityAssetSourceData;
      } | null;
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
      _key: string;
    }> | null;
    alt?: string;
    caption?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
  } | null;
}>;
// Variable: postsInitialQuery
// Query: *[_type == "posts"] | order(coalesce(createdAt, _createdAt) desc) [0...20] {    _id,    _createdAt,    _updatedAt,    title,    textContent,    createdAt,    "imageArray": imageArray{        ...,        "images": images[]{            ...,            "asset": asset->        }    }}
export type PostsInitialQueryResult = Array<{
  _id: string;
  _createdAt: string;
  _updatedAt: string;
  title: string | null;
  textContent: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  createdAt: string | null;
  imageArray: {
    _type: "imageArray";
    images: Array<{
      asset: {
        _id: string;
        _type: "sanity.imageAsset";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        originalFilename?: string;
        label?: string;
        title?: string;
        description?: string;
        altText?: string;
        sha1hash?: string;
        extension?: string;
        mimeType?: string;
        size?: number;
        assetId?: string;
        uploadId?: string;
        path?: string;
        url?: string;
        metadata?: SanityImageMetadata;
        source?: SanityAssetSourceData;
      } | null;
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
      _key: string;
    }> | null;
    alt?: string;
    caption?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
  } | null;
}>;
// Variable: postsCountQuery
// Query: count(*[_type == "posts"])
export type PostsCountQueryResult = number;
// Variable: postByIdQuery
// Query: *[_type == "posts" && _id == $id][0] {    ...,    _id,    _createdAt,    _updatedAt,    title,    textContent,    createdAt,    "imageArray": imageArray{        ...,        "images": images[]{            ...,            "asset": asset->        }    },    "pageMeta": pageMeta{        keywords,        _updatedAt,        title,        description,        ogType,        ogTitle,        ogDescription,        "ogImage": image.asset->    }}
export type PostByIdQueryResult = {
  _id: string;
  _type: "posts";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string | null;
  textContent: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  imageArray: {
    _type: "imageArray";
    images: Array<{
      asset: {
        _id: string;
        _type: "sanity.imageAsset";
        _createdAt: string;
        _updatedAt: string;
        _rev: string;
        originalFilename?: string;
        label?: string;
        title?: string;
        description?: string;
        altText?: string;
        sha1hash?: string;
        extension?: string;
        mimeType?: string;
        size?: number;
        assetId?: string;
        uploadId?: string;
        path?: string;
        url?: string;
        metadata?: SanityImageMetadata;
        source?: SanityAssetSourceData;
      } | null;
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
      _key: string;
    }> | null;
    alt?: string;
    caption?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
  } | null;
  createdAt: string | null;
  pageMeta: {
    keywords: string | null;
    _updatedAt: null;
    title: null;
    description: string | null;
    ogType: "article" | "blog" | "image" | "video" | "website" | null;
    ogTitle: string | null;
    ogDescription: null;
    ogImage: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
  } | null;
} | null;
// Variable: aboutMetaQuery
// Query: *[_type == "about"][0] {    "pageMeta": pageMeta{        keywords,        _updatedAt,        title,        description,        ogType,        ogTitle,        ogDescription,        "ogImage": image.asset->    }}
export type AboutMetaQueryResult = {
  pageMeta: {
    keywords: string | null;
    _updatedAt: null;
    title: null;
    description: string | null;
    ogType: "article" | "blog" | "image" | "video" | "website" | null;
    ogTitle: string | null;
    ogDescription: null;
    ogImage: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
  } | null;
} | null;
// Variable: aboutQuery
// Query: *[_type == "about"][0] {    _id,    _createdAt,    _updatedAt,    title,    textContent,    "pageMeta": pageMeta{        keywords,        _updatedAt,        title,        description,        ogType,        ogTitle,        ogDescription,        "ogImage": image.asset->    }}
export type AboutQueryResult = {
  _id: string;
  _createdAt: string;
  _updatedAt: string;
  title: string | null;
  textContent: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  pageMeta: {
    keywords: string | null;
    _updatedAt: null;
    title: null;
    description: string | null;
    ogType: "article" | "blog" | "image" | "video" | "website" | null;
    ogTitle: string | null;
    ogDescription: null;
    ogImage: {
      _id: string;
      _type: "sanity.imageAsset";
      _createdAt: string;
      _updatedAt: string;
      _rev: string;
      originalFilename?: string;
      label?: string;
      title?: string;
      description?: string;
      altText?: string;
      sha1hash?: string;
      extension?: string;
      mimeType?: string;
      size?: number;
      assetId?: string;
      uploadId?: string;
      path?: string;
      url?: string;
      metadata?: SanityImageMetadata;
      source?: SanityAssetSourceData;
    } | null;
  } | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"index\"][0] {\n    ...,\n    \"elements\": elements[] | order(@->._createdAt desc) {\n        _type,\n        _ref,\n        ...@-> {\n            _type,\n            ...select(\n                _type == \"imageBlock\" => {\n                    _createdAt,\n                    _updatedAt,\n                    \"image\": image.asset->{\n                        ...\n                    },\n                    alt,\n                    caption\n                },\n                _type == \"textBlock\" => {\n                    _createdAt,\n                    _updatedAt,\n                    title,\n                    text\n                }\n            )\n        }\n    }\n  }": HomepageQueryResult;
    "*[_type == \"index\"][0] {\n     \"pageMeta\": pageMeta{\n        keywords,\n        _updatedAt,\n        title,\n        description,\n        ogType,\n        ogTitle,\n        ogDescription,\n        \"ogImage\": image.asset->\n     }\n    }\n  ": HomepageMetaQueryResult;
    "*[_type == \"posts\"] | order(coalesce(createdAt, _createdAt) desc) {\n    _id,\n    _createdAt,\n    _updatedAt,\n    title,\n    textContent,\n    createdAt,\n    \"imageArray\": imageArray{\n        ...,\n        \"images\": images[]{\n            ...,\n            \"asset\": asset->\n        }\n    }\n}": PostsQueryResult;
    "*[_type == \"posts\"] | order(coalesce(createdAt, _createdAt) desc) [$start...$end] {\n    _id,\n    _createdAt,\n    _updatedAt,\n    title,\n    textContent,\n    createdAt,\n    \"imageArray\": imageArray{\n        ...,\n        \"images\": images[]{\n            ...,\n            \"asset\": asset->\n        }\n    }\n}": PostsPaginatedQueryResult;
    "*[_type == \"posts\"] | order(coalesce(createdAt, _createdAt) desc) [0...20] {\n    _id,\n    _createdAt,\n    _updatedAt,\n    title,\n    textContent,\n    createdAt,\n    \"imageArray\": imageArray{\n        ...,\n        \"images\": images[]{\n            ...,\n            \"asset\": asset->\n        }\n    }\n}": PostsInitialQueryResult;
    "count(*[_type == \"posts\"])": PostsCountQueryResult;
    "*[_type == \"posts\" && _id == $id][0] {\n    ...,\n    _id,\n    _createdAt,\n    _updatedAt,\n    title,\n    textContent,\n    createdAt,\n    \"imageArray\": imageArray{\n        ...,\n        \"images\": images[]{\n            ...,\n            \"asset\": asset->\n        }\n    },\n    \"pageMeta\": pageMeta{\n        keywords,\n        _updatedAt,\n        title,\n        description,\n        ogType,\n        ogTitle,\n        ogDescription,\n        \"ogImage\": image.asset->\n    }\n}": PostByIdQueryResult;
    "*[_type == \"about\"][0] {\n    \"pageMeta\": pageMeta{\n        keywords,\n        _updatedAt,\n        title,\n        description,\n        ogType,\n        ogTitle,\n        ogDescription,\n        \"ogImage\": image.asset->\n    }\n}": AboutMetaQueryResult;
    "*[_type == \"about\"][0] {\n    _id,\n    _createdAt,\n    _updatedAt,\n    title,\n    textContent,\n    \"pageMeta\": pageMeta{\n        keywords,\n        _updatedAt,\n        title,\n        description,\n        ogType,\n        ogTitle,\n        ogDescription,\n        \"ogImage\": image.asset->\n    }\n}": AboutQueryResult;
  }
}
